name: Build and Test üêç distribution üì¶

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python with uv
        uses: ./.github/actions/setup-python-uv

      - name: Run Tests and Quality Checks
        run: |
          make checkall

      - name: Package
        run: make package

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-3.12-x64-${{ hashFiles('**/pyproject.toml') }}-${{ github.sha }}

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-ubuntu-latest-3.12-x64
          path: dist/

  validate-version:
    runs-on: ubuntu-latest
    needs:
      - build # Wait for all build jobs to complete
    if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should-create-tag: ${{ steps.check_tag.outputs.should-create-tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python with uv
        uses: ./.github/actions/setup-python-uv

      - name: Validate version
        id: get_version
        uses: ./.github/actions/validate-version

      - name: Fetch all tags
        run: git fetch --tags

      - name: Check if tag already exists
        id: check_tag
        run: |
          set -euo pipefail
          version="${{ steps.get_version.outputs.version }}"
          tag="v$version"
          echo "Checking if tag $tag already exists..."

          TAG_EXISTS=$(git tag --list "$tag" || true)
          if [ -n "$TAG_EXISTS" ]; then
            echo "::warning::Tag $tag already exists. Consider bumping the version."
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
            echo "should-create-tag=false" >> $GITHUB_OUTPUT
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
            echo "Tag $tag does not exist. Good to proceed."
            echo "should-create-tag=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate tag uniqueness
        if: env.TAG_EXISTS == 'true'
        run: |
          set -euo pipefail
          version="${{ steps.get_version.outputs.version }}"
          tag="v$version"
          echo "::error::Tag $tag already exists. Please bump the version before pushing."
          echo "Recent existing tags:"
          git tag --list "v*" | sort -V | tail -10 || echo "No existing tags found"
          exit 1

  # Auto-tagging job for main branch pushes (when version changes)
  auto-tag:
    runs-on: ubuntu-latest
    needs: [build, validate-version]
    if: ${{ github.ref == 'refs/heads/main' && needs.validate-version.outputs.should-create-tag == 'true' }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          tag="v${{ needs.validate-version.outputs.version }}"
          echo "Auto-creating tag for main branch: $tag"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$tag" -m "Auto-release $tag"
          git push origin "$tag"
          echo "‚úÖ Created and pushed tag: $tag"

      - name: Discord notification - Auto-tag success
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'üè∑Ô∏è Auto-tagged ${{ github.repository }} v${{ needs.validate-version.outputs.version }} on main branch push'
        continue-on-error: true

      - name: Discord notification - Auto-tag failure
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: '‚ùå Failed to auto-tag ${{ github.repository }} v${{ needs.validate-version.outputs.version }} on main branch'
        continue-on-error: true

  # Global failure notification for any job failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [build, validate-version, auto-tag]
    if: always() && contains(needs.*.result, 'failure')
    steps:
      - name: Discord notification - Build pipeline failure
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'üí• Build pipeline FAILED for ${{ github.repository }} on ${{ github.ref_name }}. Check workflow logs!'
        continue-on-error: true
